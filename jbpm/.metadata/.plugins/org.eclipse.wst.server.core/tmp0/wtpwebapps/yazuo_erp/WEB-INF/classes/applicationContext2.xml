<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                     	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     	http://www.springframework.org/schema/context
                     	http://www.springframework.org/schema/context/spring-context-3.0.xsd
                    	http://www.springframework.org/schema/aop
                     	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     	http://www.springframework.org/schema/tx
                     	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                     	http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
					    http://www.springframework.org/schema/task
					    http://www.springframework.org/schema/task/spring-task-3.0.xsd
			            http://www.springframework.org/schema/cache
			            http://www.springframework.org/schema/cache/spring-cache.xsd"
    default-autowire="byName" default-lazy-init="true">
   
    <!-- 缓存管理
    <cache:annotation-driven />
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cache-manager-ref="ehcache"/>
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:config-location="classpath:ehcache.xml"/> 
	-->
	<!-- 使Spring关注Annotation -->
	<context:annotation-config />
	<!-- 启用自动扫描 -->
	<context:component-scan base-package="com.yazuo">
	</context:component-scan>
	<!-- AOP-->
	<aop:aspectj-autoproxy />
    <!-- 支持异步方法执行 -->
    <task:annotation-driven proxy-target-class="true"/> 
    
	<!-- Aspect -->
	<bean id="logAspect" class="com.yazuo.erp.filter.ServiceAspect" />
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <!-- 统计连接 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接池时连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 允许最大连接数量为 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 连接有效时间，连接超过多少秒未使用，则该连接丢弃 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程-->	
		<property name="timeBetweenEvictionRunsMillis" value="20000"/>
		<!--指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
                                       注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<property name="testWhileIdle" value="true"/>
		<property name="validationQuery" value="select 1 "/>
		<!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="${jdbc.maxActive}"/>
	</bean>
	 <!-- crm连接 -->
	<bean id="dataSourceCrm" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${crmjdbc.crmdriver}" />
		<property name="url" value="${crmjdbc.crmurl}" />
		<property name="username" value="${crmjdbc.crmusername}" />
		<property name="password" value="${crmjdbc.crmpassword}" />
		<!-- 初始化连接池时连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 允许最大连接数量为 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 连接有效时间，连接超过多少秒未使用，则该连接丢弃 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程-->	
		<property name="timeBetweenEvictionRunsMillis" value="20000"/>
		<!--指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
                                       注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<property name="testWhileIdle" value="true"/>
		<property name="validationQuery" value="select 1 "/>
		<!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="${jdbc.maxActive}"/>
	</bean>
	
	<bean id="dataSourceCrm210" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.urlcrm}" />
		<property name="username" value="${jdbc.usernamecrm}" />
		<property name="password" value="${jdbc.passwordcrm}" />
		<!-- 初始化连接池时连接数量 -->
		<!-- <property name="initialSize" value="${jdbc.initialSize}" /> -->
		<!-- 允许最大连接数量为 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 连接有效时间，连接超过多少秒未使用，则该连接丢弃 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程 -->
		<property name="timeBetweenEvictionRunsMillis" value="20000" />
		<!--指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. 注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select 1 " />
		<!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="${jdbc.maxActive}" />
	</bean>

	<bean id="jdbcTemp" lazy-init="true"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref bean="dataSourceCrm" />
		</constructor-arg>
	</bean>
	
    <mybatis:scan base-package="com.yazuo.erp"  annotation="org.springframework.stereotype.Repository" />
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
         <!--configLocation属性指定mybatis的核心配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 指定 MyBatis 的 XML映射器文件的位置 -->
         <property name="mapperLocations" value="classpath*:com/yazuo/erp/**/mapper/*.xml" />
    </bean>

 <!--set up Thread safe sqlSession and use Batch Executor as default -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
       <!--<constructor-arg index="1" value="BATCH" />-->
    </bean>

		<!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.yaozuo.erp.system,com.yaozuo.erp.train" />
		</bean>
    	
-->
	<bean id="txManager" lazy-init="true"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager ">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean>
	<aop:config>
		<aop:pointcut id="servicePointcut"
			expression="execution (* com.yazuo.erp.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="servicePointcut"
			advice-ref="txAdvice"></aop:advisor>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="execute*" />
			<tx:method name="delete*" />
			<tx:method name="update*" /> 
			<tx:method name="save*" />
			<tx:method name="batch*" />
		</tx:attributes>
	</tx:advice>
   <!--  <bean id="loadDataProcessor" class="com.yazuo.erp.base.LoadDataProcessor" /> -->
   
   <!-- 发送邮件bean -->
    
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.yazuo.com" />
		<property name="username" value="yazuoservice@yazuo.com" /> <!-- 邮件系统用户名 -->
		<property name="password" value="yazuoerp" />
		<property name="javaMailProperties">
		   <props>
	       	      <prop key="mail.smtp.auth">true</prop>
	       	     <!--  <prop key="mail.smtp.starttls.enable">true</prop> -->
	       	   </props>
		</property> 
	</bean>
	<!-- this is a template message that we can pre-load with default state -->
	<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="yazuoservice@yazuo.com" />
		<!-- <property name="to" value="webadmin@yazuo.com" />
		<property name="subject" value="Testing Subject" />
		<property name="text">
		   <value>
			<![CDATA[
				Dear %s,
				Mail Content : %s
			]]>
	   	   </value>
        </property> -->
	</bean>
	
	
	<!-- spring atomikos 配置　开始-->  
    <!-- mysql数据源1 -->  
    <bean id="mysqlDS1" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close">  
        <description>mysql xa datasource1</description>  
        <property name="uniqueResourceName">  
            <value>mysql_ds1</value>  
        </property>  
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />  
        <property name="xaProperties">  
            <props>  
                <prop key="user">root</prop>  
                <prop key="password">root</prop>  
                <prop key="URL">jdbc:mysql://localhost:3306/user</prop>  
            </props>  
        </property>  
        <!-- 连接池里面连接的个数? -->   
        <property name="poolSize" value="3"/>   
        <property name="maxPoolSize" value="15"/>   
    </bean>
     <!-- mysql数据源2 -->  
    <bean id="mysqlDS2" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close">  
        <description>mysql xa datasource2</description>  
        <property name="uniqueResourceName">  
            <value>mysql_ds2</value>  
        </property>  
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />  
        <property name="xaProperties">  
            <props>  
                <prop key="user">root</prop>  
                <prop key="password">root</prop>  
                <prop key="URL">jdbc:mysql://localhost:3306/log</prop>  
            </props>  
        </property>  
        <!-- 连接池里面连接的个数? -->   
        <property name="poolSize" value="3"/>   
        <property name="maxPoolSize" value="15"/>   
    </bean>
    
     <!-- atomikos事务管理器 -->  
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"  
        init-method="init" destroy-method="close">  
        <description>UserTransactionManager</description>  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>  
  
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="300" />  
    </bean>  
  
    <!-- spring 事务管理器 -->  
    <bean id="springTransactionManager"  
        class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager">  
            <ref bean="atomikosTransactionManager" />  
        </property>  
        <property name="userTransaction">  
            <ref bean="atomikosUserTransaction" />  
        </property>  
    </bean>  
    
    <bean id="jdbcTemplate1" class="org.springframework.jdbc.core.JdbcTemplate">  
        <constructor-arg>  
            <ref bean="mysqlDS1" />  
        </constructor-arg>  
    </bean>  
      
    <bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">  
        <constructor-arg>  
            <ref bean="mysqlDS2" />  
        </constructor-arg>  
    </bean>  
  
  
	<!-- 根据不同的数据源配置两个jdbcTemplate -->

	<!-- -->
	<bean id="userDao" class="com.zdp.dao.UserDao">
		<property name="jdbcTemplate" ref="jdbcTemplate1" />
	</bean>

	<bean id="logDao" class="com.zdp.dao.LogDao">
		<property name="jdbcTemplate" ref="jdbcTemplate2" />
	</bean>
	<bean id="userServiceJTA" class="com.zdp.service.UserServiceJTA">
		<property name="userDao" ref="userDao" />
		<property name="logDao" ref="logDao" />
	</bean>
 
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="jdbcTemplateCrm" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceCrm" />
	</bean>
	
	<bean id="jdbcTemplateCrm210" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceCrm210" />
	</bean> 
	
	<!-- JTA事务传播特性 -->
    <tx:advice id="txAdviceJTA" transaction-manager="springTransactionManager">
        <tx:attributes>
        	<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
        	<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="create*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
        	<tx:method name="*" read-only="true"/> 
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:advisor pointcut="execution(* com.zdp.service..*(..))"   advice-ref="txAdviceJTA" />
    </aop:config>
</beans>